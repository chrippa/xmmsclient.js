# This module is automatically generated by XMMS2. Do not edit.
xmmsclient ?= require "xmmsclient/lib/xmmsclient"
# Main
class Main

	object_id: 1
	constructor: (@client) ->

	hello: (protocol_version, client) ->
		### Says hello to the daemon. ###
		protocol_version = xmmsclient.Message.check_int protocol_version
		client = xmmsclient.Message.check_string client

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 32
		message.args = [protocol_version, client]

		return @client.send_message message


	quit: ->
		### Shuts down the daemon. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 33
		message.args = []

		return @client.send_message message


	list_plugins: (plugin_type) ->
		### Retrieves the list of available plugins. ###
		plugin_type = xmmsclient.Message.check_int plugin_type

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 34
		message.args = [plugin_type]

		return @client.send_message message


	stats: ->
		### Retrieves statistics from the server. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 35
		message.args = []

		return @client.send_message message


	broadcast_quit: ->
		### This broadcast is triggered when the daemon is shutting down. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 33
		message.args = [12]

		return @client.send_message message



xmmsclient.Client.IPC.Main = Main

# Playlist
class Playlist

	object_id: 2
	constructor: (@client) ->

	shuffle: (playlist) ->
		### Shuffles the current playlist. ###
		playlist = xmmsclient.Message.check_string playlist

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 32
		message.args = [playlist]

		return @client.send_message message


	set_next: (position) ->
		### Sets the playlist entry that will be played next. ###
		position = xmmsclient.Message.check_int position

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 33
		message.args = [position]

		return @client.send_message message


	set_next_rel: (position_delta) ->
		### Sets the playlist entry that will be played next. ###
		position_delta = xmmsclient.Message.check_int position_delta

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 34
		message.args = [position_delta]

		return @client.send_message message


	add_url: (name, url) ->
		### Adds an URL to the given playlist. ###
		name = xmmsclient.Message.check_string name
		url = xmmsclient.Message.check_string url

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 35
		message.args = [name, url]

		return @client.send_message message


	add_id: (playlist, id) ->
		### Adds a song to the given playlist. ###
		playlist = xmmsclient.Message.check_string playlist
		id = xmmsclient.Message.check_int id

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 36
		message.args = [playlist, id]

		return @client.send_message message


	add_idlist: (name, collection) ->
		### Adds songs to the given playlist. ###
		name = xmmsclient.Message.check_string name
		collection = xmmsclient.Message.check_collection collection

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 37
		message.args = [name, collection]

		return @client.send_message message


	add_collection: (name, collection, order) ->
		### Adds the contents of a collection to the given playlist. ###
		name = xmmsclient.Message.check_string name
		collection = xmmsclient.Message.check_collection collection
		order = xmmsclient.Message.check_list order, "string"

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 38
		message.args = [name, collection, order]

		return @client.send_message message


	remove_entry: (playlist, position) ->
		### Removes an entry from the given playlist. ###
		playlist = xmmsclient.Message.check_string playlist
		position = xmmsclient.Message.check_int position

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 39
		message.args = [playlist, position]

		return @client.send_message message


	move_entry: (playlist, current_position, new_position) ->
		### Moves a playlist entry to a new position (absolute move). ###
		playlist = xmmsclient.Message.check_string playlist
		current_position = xmmsclient.Message.check_int current_position
		new_position = xmmsclient.Message.check_int new_position

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 40
		message.args = [playlist, current_position, new_position]

		return @client.send_message message


	clear: (playlist) ->
		### Removes all songs from the given playlist. ###
		playlist = xmmsclient.Message.check_string playlist

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 41
		message.args = [playlist]

		return @client.send_message message


	sort: (playlist, properties) ->
		### Sorts the given playlist by the given properties. ###
		playlist = xmmsclient.Message.check_string playlist
		properties = xmmsclient.Message.check_list properties, "string"

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 42
		message.args = [playlist, properties]

		return @client.send_message message


	list_entries: (name) ->
		### Lists the contents of the given playlist. ###
		name = xmmsclient.Message.check_string name

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 43
		message.args = [name]

		return @client.send_message message


	current_pos: (name) ->
		### Retrieves the current position in the playlist with the given name. ###
		name = xmmsclient.Message.check_string name

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 44
		message.args = [name]

		return @client.send_message message


	current_active: ->
		### Retrieves the name of the currently active playlist. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 45
		message.args = []

		return @client.send_message message


	insert_url: (name, position, url) ->
		### Inserts an URL into the given playlist. ###
		name = xmmsclient.Message.check_string name
		position = xmmsclient.Message.check_int position
		url = xmmsclient.Message.check_string url

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 46
		message.args = [name, position, url]

		return @client.send_message message


	insert_id: (name, position, entry) ->
		### Inserts a song into the given playlist. ###
		name = xmmsclient.Message.check_string name
		position = xmmsclient.Message.check_int position
		entry = xmmsclient.Message.check_int entry

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 47
		message.args = [name, position, entry]

		return @client.send_message message


	insert_collection: (name, position, collection, order) ->
		### Inserts the contents of a collection into the given playlist. ###
		name = xmmsclient.Message.check_string name
		position = xmmsclient.Message.check_int position
		collection = xmmsclient.Message.check_collection collection
		order = xmmsclient.Message.check_list order, "string"

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 48
		message.args = [name, position, collection, order]

		return @client.send_message message


	load: (name) ->
		### Loads the playlist with the given name. ###
		name = xmmsclient.Message.check_string name

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 49
		message.args = [name]

		return @client.send_message message


	radd: (name, url) ->
		### Adds a directory recursively to the playlist with the given name. ###
		name = xmmsclient.Message.check_string name
		url = xmmsclient.Message.check_string url

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 50
		message.args = [name, url]

		return @client.send_message message


	rinsert: (name, position, url) ->
		### Insert a directory recursively into the playlist with the given name at the given position. ###
		name = xmmsclient.Message.check_string name
		position = xmmsclient.Message.check_int position
		url = xmmsclient.Message.check_string url

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 51
		message.args = [name, position, url]

		return @client.send_message message


	broadcast_playlist_changed: ->
		### This broadcast is triggered when the playlist changes. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 33
		message.args = [0]

		return @client.send_message message


	broadcast_current_pos: ->
		### This broadcast is triggered when the position in the playlist changes. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 33
		message.args = [6]

		return @client.send_message message


	broadcast_loaded: ->
		### This broadcast is triggered when another playlist is loaded. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 33
		message.args = [7]

		return @client.send_message message



xmmsclient.Client.IPC.Playlist = Playlist

# Config
class Config

	object_id: 3
	constructor: (@client) ->

	get_value: (key) ->
		### Retrieves the value of the config property with the given key. ###
		key = xmmsclient.Message.check_string key

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 32
		message.args = [key]

		return @client.send_message message


	set_value: (key, value) ->
		### Sets the value of the config property with the given key. ###
		key = xmmsclient.Message.check_string key
		value = xmmsclient.Message.check_string value

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 33
		message.args = [key, value]

		return @client.send_message message


	register_value: (key, value) ->
		### Registers a new config property for the connected client. ###
		key = xmmsclient.Message.check_string key
		value = xmmsclient.Message.check_string value

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 34
		message.args = [key, value]

		return @client.send_message message


	list_values: ->
		### Retrieves the list of known config properties. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 35
		message.args = []

		return @client.send_message message


	broadcast_value_changed: ->
		### This broadcast is triggered when the value of any config property changes. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 33
		message.args = [1]

		return @client.send_message message



xmmsclient.Client.IPC.Config = Config

# Playback
class Playback

	object_id: 4
	constructor: (@client) ->

	start: ->
		### Starts playback. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 32
		message.args = []

		return @client.send_message message


	stop: ->
		### Stops playback. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 33
		message.args = []

		return @client.send_message message


	pause: ->
		### Pauses playback. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 34
		message.args = []

		return @client.send_message message


	tickle: ->
		### Stops decoding of the current song. This will start decoding of the song set with the playlist_set_next command or the current song again if the playlist_set_next command wasn't executed. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 35
		message.args = []

		return @client.send_message message


	playtime: ->
		### Retrieves the current playtime. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 36
		message.args = []

		return @client.send_message message


	seek_ms: (offset_milliseconds, whence) ->
		### Seeks to a position in the currently played song (given in milliseconds). ###
		offset_milliseconds = xmmsclient.Message.check_int offset_milliseconds
		whence = xmmsclient.Message.check_int whence

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 37
		message.args = [offset_milliseconds, whence]

		return @client.send_message message


	seek_samples: (offset_samples, whence) ->
		### Seeks to a position in the currently played song (given in samples). ###
		offset_samples = xmmsclient.Message.check_int offset_samples
		whence = xmmsclient.Message.check_int whence

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 38
		message.args = [offset_samples, whence]

		return @client.send_message message


	status: ->
		### Retrieves the current playback status. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 39
		message.args = []

		return @client.send_message message


	current_id: ->
		### Retrieves the ID of the song that's currently being played. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 40
		message.args = []

		return @client.send_message message


	volume_set: (channel, volume) ->
		### Changes the volume for the given channel. ###
		channel = xmmsclient.Message.check_string channel
		volume = xmmsclient.Message.check_int volume

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 41
		message.args = [channel, volume]

		return @client.send_message message


	volume_get: ->
		### Retrieves the volume for all available channel. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 42
		message.args = []

		return @client.send_message message


	signal_playtime: ->
		### Emits the current playtime. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 32
		message.args = [4]

		return @client.send_signal_message message, 4


	broadcast_status: ->
		### This broadcast is triggered when the playback status changes. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 33
		message.args = [2]

		return @client.send_message message


	broadcast_volume_changed: ->
		### This broadcast is triggered when the playback volume changes. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 33
		message.args = [3]

		return @client.send_message message


	broadcast_current_id: ->
		### This broadcast is triggered when the played song's media ID changes. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 33
		message.args = [5]

		return @client.send_message message



xmmsclient.Client.IPC.Playback = Playback

# Medialib
class Medialib

	object_id: 5
	constructor: (@client) ->

	get_info: (id) ->
		### Retrieves information about a medialib entry. ###
		id = xmmsclient.Message.check_int id

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 32
		message.args = [id]

		return @client.send_message message


	import_path: (directory) ->
		### Adds a directory recursively to the medialib. ###
		directory = xmmsclient.Message.check_string directory

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 33
		message.args = [directory]

		return @client.send_message message


	rehash: (id) ->
		### Rehashes the medialib. This will make sure that the data in the medialib is the same as the data in the files. ###
		id = xmmsclient.Message.check_int id

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 34
		message.args = [id]

		return @client.send_message message


	get_id: (url) ->
		### Retrieves the medialib ID that belongs to the given URL. ###
		url = xmmsclient.Message.check_string url

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 35
		message.args = [url]

		return @client.send_message message


	remove_entry: (entry) ->
		### Removes an entry from the medialib. ###
		entry = xmmsclient.Message.check_int entry

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 36
		message.args = [entry]

		return @client.send_message message


	set_property_string: (entry, source, key, value) ->
		### Sets a medialib property to a string value. ###
		entry = xmmsclient.Message.check_int entry
		source = xmmsclient.Message.check_string source
		key = xmmsclient.Message.check_string key
		value = xmmsclient.Message.check_string value

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 37
		message.args = [entry, source, key, value]

		return @client.send_message message


	set_property_int: (entry, source, key, value) ->
		### Sets a medialib property to an integer value. ###
		entry = xmmsclient.Message.check_int entry
		source = xmmsclient.Message.check_string source
		key = xmmsclient.Message.check_string key
		value = xmmsclient.Message.check_int value

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 38
		message.args = [entry, source, key, value]

		return @client.send_message message


	remove_property: (entry, source, key) ->
		### Removes a propert from a medialib entry. ###
		entry = xmmsclient.Message.check_int entry
		source = xmmsclient.Message.check_string source
		key = xmmsclient.Message.check_string key

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 39
		message.args = [entry, source, key]

		return @client.send_message message


	move_entry: (entry, url) ->
		### Updates the URL of a medialib entry that has been moved to a new location. ###
		entry = xmmsclient.Message.check_int entry
		url = xmmsclient.Message.check_string url

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 40
		message.args = [entry, url]

		return @client.send_message message


	add_entry: (url) ->
		### Add the given URL to the medialib. ###
		url = xmmsclient.Message.check_string url

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 41
		message.args = [url]

		return @client.send_message message


	broadcast_entry_added: ->
		### This broadcast is triggered when an entry is added to the medialib. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 33
		message.args = [8]

		return @client.send_message message


	broadcast_entry_changed: ->
		### This broadcast is triggered when the properties of a medialib entry are changed. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 33
		message.args = [9]

		return @client.send_message message


	broadcast_entry_removed: ->
		### This broadcast is triggered when a medialib entry is removed. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 33
		message.args = [10]

		return @client.send_message message



xmmsclient.Client.IPC.Medialib = Medialib

# Collection
class Collection

	object_id: 6
	constructor: (@client) ->

	get: (name, name_space) ->
		### Retrieves the structure of a given collection. ###
		name = xmmsclient.Message.check_string name
		name_space = xmmsclient.Message.check_string name_space

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 32
		message.args = [name, name_space]

		return @client.send_message message


	list: (name_space) ->
		### Lists the collections in the given namespace. ###
		name_space = xmmsclient.Message.check_string name_space

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 33
		message.args = [name_space]

		return @client.send_message message


	save: (name, name_space, collection) ->
		### Save the given collection in the DAG under the given name in the given namespace. ###
		name = xmmsclient.Message.check_string name
		name_space = xmmsclient.Message.check_string name_space
		collection = xmmsclient.Message.check_collection collection

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 34
		message.args = [name, name_space, collection]

		return @client.send_message message


	remove: (name, name_space) ->
		### Remove the given collection from the DAG. ###
		name = xmmsclient.Message.check_string name
		name_space = xmmsclient.Message.check_string name_space

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 35
		message.args = [name, name_space]

		return @client.send_message message


	find: (entry, name_space) ->
		### Find all collections in the given namespace that contain a given media. ###
		entry = xmmsclient.Message.check_int entry
		name_space = xmmsclient.Message.check_string name_space

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 36
		message.args = [entry, name_space]

		return @client.send_message message


	rename: (original_name, new_name, name_space) ->
		### Rename a collection in the given namespace. ###
		original_name = xmmsclient.Message.check_string original_name
		new_name = xmmsclient.Message.check_string new_name
		name_space = xmmsclient.Message.check_string name_space

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 37
		message.args = [original_name, new_name, name_space]

		return @client.send_message message


	query: (collection, fetch) ->
		### FIXME. ###
		collection = xmmsclient.Message.check_collection collection
		fetch = xmmsclient.Message.check_dictionary fetch

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 38
		message.args = [collection, fetch]

		return @client.send_message message


	query_infos: (collection, lim_start, lim_len, order, fetch, group) ->
		### FIXME. ###
		collection = xmmsclient.Message.check_collection collection
		lim_start = xmmsclient.Message.check_int lim_start
		lim_len = xmmsclient.Message.check_int lim_len
		order = xmmsclient.Message.check_list order, "string"
		fetch = xmmsclient.Message.check_list fetch, "string"
		group = xmmsclient.Message.check_list group, "string"

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 39
		message.args = [collection, lim_start, lim_len, order, fetch, group]

		return @client.send_message message


	idlist_from_playlist: (path) ->
		### FIXME. ###
		path = xmmsclient.Message.check_string path

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 40
		message.args = [path]

		return @client.send_message message


	sync: ->
		### FIXME. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 41
		message.args = []

		return @client.send_message message


	broadcast_changed: ->
		### This broadcast is triggered when a collection is changed. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 33
		message.args = [11]

		return @client.send_message message



xmmsclient.Client.IPC.Collection = Collection

# Visualization
class Visualization

	object_id: 7
	constructor: (@client) ->

	query_version: ->
		### Retrieves the visualization version. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 32
		message.args = []

		return @client.send_message message


	register: ->
		### Registers a visualization client. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 33
		message.args = []

		return @client.send_message message


	init_shm: (id, shm_id) ->
		### FIXME. ###
		id = xmmsclient.Message.check_int id
		shm_id = xmmsclient.Message.check_string shm_id

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 34
		message.args = [id, shm_id]

		return @client.send_message message


	init_udp: (id) ->
		### FIXME. ###
		id = xmmsclient.Message.check_int id

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 35
		message.args = [id]

		return @client.send_message message


	set_property: (id, key, value) ->
		### Delivers one property. ###
		id = xmmsclient.Message.check_int id
		key = xmmsclient.Message.check_string key
		value = xmmsclient.Message.check_string value

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 36
		message.args = [id, key, value]

		return @client.send_message message


	set_properties: (id, properties) ->
		### Delivers one or more properties. ###
		id = xmmsclient.Message.check_int id
		properties = xmmsclient.Message.check_dictionary properties, "string"

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 37
		message.args = [id, properties]

		return @client.send_message message


	shutdown: (id) ->
		### Shuts down the visualization client. ###
		id = xmmsclient.Message.check_int id

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 38
		message.args = [id]

		return @client.send_message message



xmmsclient.Client.IPC.Visualization = Visualization

# MediainfoReader
class MediainfoReader

	object_id: 8
	constructor: (@client) ->

	signal_unindexed: ->
		### Emits the number of unresolved medialib entries. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 32
		message.args = [14]

		return @client.send_signal_message message, 14


	broadcast_status: ->
		### This broadcast is triggered when the status of the mediainfo reader changes. ###
		message = new xmmsclient.Message()
		message.object_id = 0
		message.command_id = 33
		message.args = [13]

		return @client.send_message message



xmmsclient.Client.IPC.MediainfoReader = MediainfoReader

# Xform
class Xform

	object_id: 9
	constructor: (@client) ->

	browse: (url) ->
		### Retrieves a list of paths available (directly) under the given path. ###
		url = xmmsclient.Message.check_string url

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 32
		message.args = [url]

		return @client.send_message message



xmmsclient.Client.IPC.Xform = Xform

# Bindata
class Bindata

	object_id: 10
	constructor: (@client) ->

	retrieve: (hash) ->
		### Retrieves a file from the server's bindata directory given the file's hash. ###
		hash = xmmsclient.Message.check_string hash

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 32
		message.args = [hash]

		return @client.send_message message


	add: (raw_data) ->
		### Adds binary data to the server's bindata directory. ###
		raw_data = xmmsclient.Message.check_binary raw_data

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 33
		message.args = [raw_data]

		return @client.send_message message


	remove: (hash) ->
		### Removes binary data from the server's bindata directory. ###
		hash = xmmsclient.Message.check_string hash

		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 34
		message.args = [hash]

		return @client.send_message message


	list: ->
		### Retrieves a list of binary data hashes from the server's bindata directory. ###
		message = new xmmsclient.Message()
		message.object_id = @object_id
		message.command_id = 35
		message.args = []

		return @client.send_message message



xmmsclient.Client.IPC.Bindata = Bindata

module.exports = xmmsclient
